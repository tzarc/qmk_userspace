FROM debian:12-slim

ARG PYTHON_VERSION=3.13.1
ARG NVM_VERSION=v0.40.1
ARG NODE_VERSION=--lts

RUN <<EOF
apt update
apt install -y --no-install-recommends util-linux python3-pip sudo curl wget git ssh jq dfu-util build-essential libtinfo5
rm -rf /var/lib/apt/lists/*
EOF

ENV NVM_DIR=/opt/nvm

# Install python
COPY <<EOF /build.sh
#!/bin/bash
set -eEuo pipefail
curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR="/opt/uv" sh
source /opt/uv/env
uv python install -i /opt/python${PYTHON_VERSION} ${PYTHON_VERSION}
chmod -R go=u /opt/python${PYTHON_VERSION}
EOF
RUN chmod +x /build.sh && /build.sh && rm -f /build.sh

# Install node
COPY <<EOF /build.sh
#!/bin/bash
set -eEuo pipefail
mkdir -p "\$NVM_DIR"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
source "\$NVM_DIR/nvm.sh"
nvm install ${NODE_VERSION}
chmod -R go=u "\$NVM_DIR"
EOF
RUN chmod +x /build.sh && /build.sh && rm -f /build.sh

# Install QMK toolchains
COPY qmk_toolchains*.tar.xz /
RUN mkdir -p /opt/qmk_toolchains \
    && tar -C /opt/qmk_toolchains -xf /qmk_toolchains*.tar.xz --strip-components=1 \
    && rm -f /qmk_toolchains*.tar.xz \
    && chmod -R go=u /opt/qmk_toolchains

# Install clang
COPY clang+llvm*.tar.xz /
RUN mkdir -p /opt/clang \
    && tar -C /opt/clang -xf /clang+llvm*.tar.xz --strip-components=1 \
    && rm -f /clang+llvm*.tar.xz \
    && chmod -R go=u /opt/clang

# Install the QMK CLI
COPY <<EOF /build.sh
#!/bin/bash
set -eEuo pipefail
export PATH="/opt/python${PYTHON_VERSION}/cpython-${PYTHON_VERSION}-linux-$(uname -m)-gnu/bin:\$PATH"
source /opt/uv/env
uv venv -p ${PYTHON_VERSION} /opt/qmk_cli
source /opt/qmk_cli/bin/activate
uv pip install qmk
curl -fsSLO https://raw.githubusercontent.com/qmk/qmk_firmware/refs/heads/master/requirements.txt
curl -fsSLO https://raw.githubusercontent.com/qmk/qmk_firmware/refs/heads/master/requirements-dev.txt
uv pip install -r requirements.txt -r requirements-dev.txt
rm -f requirements.txt requirements-dev.txt
deactivate
chmod -R go=u /opt/qmk_cli
EOF
RUN chmod +x /build.sh && /build.sh && rm -f /build.sh

# Runtime shell init script
COPY <<EOF /init.sh
#!/bin/bash
set -eEuo pipefail
qmk_uid=\$(stat --format='%u' /qmk_firmware)
qmk_gid=\$(stat --format='%g' /qmk_firmware)
groupadd -g \$qmk_gid qmk
useradd -u \$qmk_uid -g \$qmk_gid -N qmk
mkdir -p /home/qmk
cat <<EOP > /home/qmk/.bash_profile
export NVM_DIR=/opt/nvm
export PATH="/opt/qmk_toolchains/bin:/opt/clang/bin:/opt/python${PYTHON_VERSION}/cpython-${PYTHON_VERSION}-linux-$(uname -m)-gnu/bin:\\\$PATH"
source /opt/uv/env
source "\\\$NVM_DIR/nvm.sh"
nvm use --lts >/dev/null 2>&1
source "/opt/qmk_cli/bin/activate"
EOP
echo "qmk ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/qmk >/dev/null 2>&1
cd /qmk_firmware
if [[ -n \$1 ]]; then
    sudo -u qmk -g qmk -H --preserve-env=QMK_USERSPACE -- bash -lic "exec \$*"
else
    sudo -u qmk -g qmk -H --preserve-env=QMK_USERSPACE -- bash -li
fi
EOF

RUN chmod +x /init.sh

ENTRYPOINT ["/init.sh"]
CMD ["bash"]
